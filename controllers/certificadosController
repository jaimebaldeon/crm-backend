const { getAlbaranesAceptadosByMonth, getClientByContract } = require('../services/albaranesService');
const { getAlbaranesConFactura, saveFactura, generateFacturaDocument, getFacturasByClientId, updateFactura } = require('../services/facturasService');
const { saveCertificado, generateCertificadoDocumentExcel, generateCertificadoDocumentWord, getCertificadosByClientId, updateCertificado } = require('../services/certificadosService');
const { getExtintores, getOtrosActivos } = require('../services/extintoresService');

exports.generateCertificados = async (req, res) => {
    const month = req.query.month;
    const year = new Date().getFullYear()
  
    try {
      // Fetch albaranes aceptados for the specified month from the database
      const albaranesAceptados = await getAlbaranesAceptadosByMonth(month, year);

      const clientesIncorrectos = [];
      
      // Generate and save certificados documents for each filtered albaran
      for (const albaran of albaranesAceptados) {
        const client = await getClientByContract(albaran)
        const extintores = await getExtintores(albaran.id_contrato)
        const otrosActivos = await getOtrosActivos(albaran.id_contrato)

          // BORRAR: Detector Excepciones
        //   if (client.nombre.includes('MIGUEL BECERRO')) {
        //     activosCliente;
        //   }
        
        // Guardar certificado en BBDD
        try {
            idCertificado = await saveCertificado(albaran)
        } catch {
            clientesIncorrectos.push(client.nombre)
            continue
        }
        
        // Generate certificado
        const certificadoNumber = await generateCertificadoDocumentExcel(albaran, extintores, otrosActivos, client, idCertificado);
        const certificadoNum = await generateCertificadoDocumentWord(albaran, extintores, otrosActivos, client, idCertificado);
      }

      // Initialize the message variable
      let message = `Certificados de ${month} generadas correctamente.\n`;

      // Notify about skipped clients
      if (clientesIncorrectos.length > 0) {
          console.log('Las certificados de los siguientes clientes no se generaron:');
          clientesIncorrectos.forEach(clientName => console.log(`- ${clientName}`));
        //   message += 'Las certificados de los siguientes clientes no se generaron:\n';
        //   clientesIncorrectos.forEach(clientName => {
        //       message += `- ${clientName}\n`;
        //   });
      }  
  
      res.status(200).json({ message: message });
    } catch (error) {
      console.error('Error generando albaranes:', error);
      res.status(500).json({ message: 'Error al generar albaranes.' });
    }
  };
  
  exports.getCertificados = async (req, res) => {
    try {
      const data = await getFacturasByClientId(req.query.clientId);
      res.json(data);
    } catch (err) {
      console.error('Error fetching facturas:', err);
      res.status(500).send('Server Error');
    }
  };

  exports.updateCertificado = async (req, res) => {
    try {
      const facturaData = req.body.facturaData; 
      const result = await updateFactura(facturaData); 
      res.json(result);
    } catch (error) {
      console.error('Error actualizando cliente:', error);
      res.status(500).send('Server Error');
    }
  };